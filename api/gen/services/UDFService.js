/* eslint-disable no-unused-vars */
const Service = require("./Service");
/**
 * history object
 * Gets a symbol info message
 *
 * symbol String trading pair symbol (optional)
 * from BigDecimal timestamp from (optional)
 * to BigDecimal timestamp to (optional)
 * resolution String time resolution (optional)
 * countback BigDecimal counter (optional)
 * currencyCode String symbol-cde (optional)
 * returns HistoryElement
 * */
const geHistoryElement = ({
  symbol,
  from,
  to,
  resolution,
  countback,
  currencyCode,
}) =>
  new Promise(async (resolve, reject) => {
    try {
      resolve(
        Service.successResponse({
          s: "ok",
          t: [
            1659817320, 1659817380, 1659817440, 1659817500, 1659817560,
            1659817620, 1659817680, 1659817740, 1659817800, 1659817860,
            1659817920, 1659817980, 1659818040, 1659818100, 1659818160,
            1659818220, 1659818280, 1659818340, 1659818400, 1659818460,
            1659818520, 1659818580, 1659818640, 1659818700, 1659818760,
            1659818820, 1659818880, 1659818940, 1659819000, 1659819060,
            1659819120, 1659819180, 1659819240, 1659819300, 1659819360,
            1659819420, 1659819480, 1659819540, 1659819600, 1659819660,
            1659819720, 1659819780, 1659819840, 1659819900, 1659819960,
            1659820020, 1659820080, 1659820140, 1659820200, 1659820260,
            1659820320, 1659820380, 1659820440, 1659820500, 1659820560,
            1659820620, 1659820680, 1659820740, 1659820800, 1659820860,
            1659820920, 1659820980, 1659821040, 1659821100, 1659821160,
            1659821220, 1659821280, 1659821340, 1659821400, 1659821460,
            1659821520, 1659821580, 1659821640, 1659821700, 1659821760,
            1659821820, 1659821880, 1659821940, 1659822000, 1659822060,
            1659822120, 1659822180, 1659822240, 1659822300, 1659822360,
            1659822420, 1659822480, 1659822540, 1659822600, 1659822660,
            1659822720, 1659822780, 1659822840, 1659822900, 1659822960,
            1659823020, 1659823080, 1659823140, 1659823200, 1659823260,
            1659823320, 1659823380, 1659823440, 1659823500, 1659823560,
            1659823620, 1659823680, 1659823740, 1659823800, 1659823860,
            1659823920, 1659823980, 1659824040, 1659824100, 1659824160,
            1659824220, 1659824280, 1659824340, 1659824400, 1659824460,
            1659824520, 1659824580, 1659824640, 1659824700, 1659824760,
            1659824820, 1659824880, 1659824940, 1659825000,
          ],
          c: [
            0.073929, 0.073906, 0.073917, 0.073903, 0.073904, 0.073909,
            0.073907, 0.073912, 0.073914, 0.073914, 0.073904, 0.07388, 0.073915,
            0.073883, 0.073889, 0.073876, 0.073867, 0.073851, 0.073858,
            0.073902, 0.073906, 0.073898, 0.073888, 0.073874, 0.073892,
            0.073883, 0.073891, 0.073902, 0.073899, 0.073923, 0.073937,
            0.074007, 0.074008, 0.074009, 0.07404, 0.074006, 0.074008, 0.074022,
            0.074026, 0.074005, 0.07401, 0.073984, 0.073981, 0.074036, 0.074045,
            0.07406, 0.074041, 0.074056, 0.074053, 0.074066, 0.074068, 0.074044,
            0.074047, 0.074035, 0.074012, 0.074013, 0.074008, 0.07401, 0.074015,
            0.074004, 0.074011, 0.074003, 0.073999, 0.074001, 0.07401, 0.073998,
            0.074021, 0.074021, 0.074026, 0.073989, 0.073995, 0.074001,
            0.073999, 0.074001, 0.073988, 0.07398, 0.073983, 0.073994, 0.073993,
            0.073986, 0.073985, 0.073983, 0.073972, 0.073973, 0.073963,
            0.073986, 0.074044, 0.074083, 0.074028, 0.074031, 0.074044,
            0.074043, 0.07405, 0.074058, 0.074085, 0.074072, 0.074095, 0.074089,
            0.074034, 0.074054, 0.074041, 0.074106, 0.074207, 0.074109,
            0.074063, 0.074031, 0.07406, 0.074063, 0.074082, 0.0741, 0.074082,
            0.074089, 0.074063, 0.074026, 0.074001, 0.073998, 0.073992,
            0.073903, 0.073904, 0.073923, 0.073919, 0.073923, 0.073941, 0.07393,
            0.073959, 0.073958, 0.073948, 0.073946, 0.073925,
          ],
          o: [
            0.073911, 0.073928, 0.073913, 0.073917, 0.0739, 0.073904, 0.073909,
            0.073907, 0.073912, 0.073914, 0.073914, 0.073903, 0.073881,
            0.073915, 0.073884, 0.07389, 0.073876, 0.073867, 0.07385, 0.073858,
            0.073902, 0.073905, 0.073905, 0.073889, 0.073874, 0.073892,
            0.073883, 0.073891, 0.073902, 0.073899, 0.073923, 0.073937,
            0.074007, 0.074008, 0.074009, 0.07404, 0.074007, 0.074008, 0.074022,
            0.074027, 0.074003, 0.07401, 0.073984, 0.073981, 0.074036, 0.074045,
            0.07406, 0.074041, 0.074056, 0.074054, 0.074066, 0.074068, 0.074044,
            0.074048, 0.074035, 0.074012, 0.074013, 0.074008, 0.07401, 0.074014,
            0.074004, 0.074012, 0.074003, 0.073999, 0.074001, 0.07401, 0.074,
            0.074021, 0.074038, 0.074018, 0.073989, 0.073995, 0.073993,
            0.074002, 0.073983, 0.073984, 0.073977, 0.073982, 0.073989,
            0.073985, 0.073986, 0.073984, 0.073983, 0.073973, 0.073973,
            0.073963, 0.073985, 0.074044, 0.074082, 0.074033, 0.074031,
            0.074044, 0.074044, 0.07405, 0.074059, 0.074085, 0.074073, 0.074095,
            0.074089, 0.074035, 0.074041, 0.074042, 0.074107, 0.074207,
            0.074108, 0.074063, 0.074048, 0.074059, 0.074062, 0.074083,
            0.074096, 0.074082, 0.07409, 0.074063, 0.074024, 0.073999, 0.073998,
            0.073992, 0.073903, 0.073905, 0.073927, 0.073919, 0.073923, 0.07394,
            0.073929, 0.073959, 0.073958, 0.073947, 0.073945,
          ],
          h: [
            0.073947, 0.073928, 0.073918, 0.073918, 0.073904, 0.073909,
            0.073929, 0.073912, 0.073915, 0.073915, 0.073914, 0.073912,
            0.073916, 0.073916, 0.073897, 0.073897, 0.073876, 0.073867,
            0.073858, 0.073907, 0.073906, 0.073906, 0.073906, 0.073889,
            0.073912, 0.073893, 0.073891, 0.073903, 0.073902, 0.073923,
            0.073943, 0.074008, 0.074008, 0.074009, 0.074042, 0.074046,
            0.074018, 0.074022, 0.07403, 0.074027, 0.074015, 0.07401, 0.073985,
            0.074071, 0.074045, 0.07406, 0.074061, 0.074056, 0.07406, 0.074091,
            0.074074, 0.074069, 0.074048, 0.074048, 0.074035, 0.074013,
            0.074013, 0.074011, 0.074026, 0.074015, 0.074025, 0.074012,
            0.074004, 0.074002, 0.074011, 0.074011, 0.07404, 0.07404, 0.074038,
            0.074026, 0.074001, 0.074001, 0.07401, 0.074008, 0.074001, 0.073993,
            0.074015, 0.074016, 0.073993, 0.073999, 0.074025, 0.074002, 0.07399,
            0.073997, 0.073981, 0.074015, 0.074047, 0.0741, 0.074082, 0.074049,
            0.074099, 0.074055, 0.074067, 0.074083, 0.074092, 0.074085,
            0.074096, 0.074103, 0.07409, 0.074055, 0.074055, 0.074109, 0.074225,
            0.074207, 0.074108, 0.07407, 0.07406, 0.074063, 0.074083, 0.0741,
            0.074101, 0.074092, 0.07409, 0.07407, 0.074024, 0.074008, 0.07402,
            0.073992, 0.073941, 0.073931, 0.073948, 0.07393, 0.073941, 0.073942,
            0.073968, 0.073973, 0.073958, 0.073978, 0.073945,
          ],
          l: [
            0.073911, 0.073901, 0.073913, 0.073901, 0.073876, 0.073903,
            0.073907, 0.073896, 0.073911, 0.073914, 0.073896, 0.073878,
            0.073881, 0.073883, 0.073883, 0.073876, 0.073867, 0.07385, 0.07384,
            0.073854, 0.073886, 0.073887, 0.073888, 0.073873, 0.073873,
            0.073878, 0.073882, 0.07389, 0.073896, 0.073899, 0.073923, 0.073937,
            0.073988, 0.074007, 0.074009, 0.074, 0.074006, 0.074006, 0.074021,
            0.074005, 0.074003, 0.073984, 0.07398, 0.073981, 0.074035, 0.074035,
            0.074041, 0.074041, 0.074053, 0.074049, 0.074066, 0.074044,
            0.074033, 0.074034, 0.074011, 0.074012, 0.074008, 0.074004, 0.07401,
            0.074003, 0.074003, 0.074003, 0.073983, 0.073986, 0.074001,
            0.073992, 0.073992, 0.073997, 0.074019, 0.073988, 0.073976,
            0.073976, 0.073991, 0.073976, 0.073975, 0.073976, 0.073974,
            0.073982, 0.073974, 0.073981, 0.073983, 0.073983, 0.073972,
            0.073973, 0.073962, 0.073962, 0.073975, 0.074044, 0.074006,
            0.074027, 0.074018, 0.074035, 0.074034, 0.074036, 0.074058,
            0.074071, 0.074072, 0.074087, 0.074034, 0.074019, 0.074041,
            0.074042, 0.074107, 0.074103, 0.074044, 0.07402, 0.074047, 0.074053,
            0.074045, 0.074082, 0.074081, 0.074079, 0.074063, 0.074026, 0.074,
            0.073997, 0.07399, 0.073903, 0.073903, 0.073904, 0.073913, 0.073914,
            0.073923, 0.073923, 0.073929, 0.073934, 0.073939, 0.073945,
            0.073924,
          ],
          v: [
            34.0461, 14.5326, 22.696, 19.0609, 58.081, 14.121, 28.8507, 19.4996,
            10.2698, 9.1725, 23.1668, 28.3816, 47.3941, 33.8697, 12.0972,
            27.8554, 23.4555, 31.6283, 16.9258, 46.4884, 12.8215, 13.1777,
            16.9005, 6.5618, 21.8179, 19.387, 9.6273, 2.8449, 8.9626, 10.2917,
            20.3905, 37.7589, 25.1407, 18.6067, 33.8578, 63.6401, 32.1786,
            28.0355, 13.0946, 17.9829, 13.009, 19.3846, 5.0019, 85.5612,
            32.7469, 17.1975, 32.9391, 21.1442, 31.2316, 56.4085, 21.5368,
            21.4483, 7.2972, 14.401, 20.4215, 18.0005, 12.7442, 26.5162,
            24.7362, 22.124, 22.0688, 27.9274, 18.9881, 19.6242, 16.5408,
            13.1172, 37.4552, 10.9317, 5.1736, 7.5452, 17.7862, 2.654, 8.0089,
            3.9147, 4.3027, 2.5649, 5.4027, 12.9867, 3.473, 5.3843, 29.9602,
            11.0985, 12.4199, 12.7877, 24.573, 5.3265, 14.5498, 30.0129, 22.07,
            12.0233, 49.0994, 19.997, 20.0024, 34.5308, 12.9728, 11.8185, 6.117,
            17.3988, 62.7996, 19.5133, 21.767, 47.8063, 218.7364, 51.7618,
            35.566, 36.5921, 16.6461, 32.961, 24.6751, 29.243, 43.6235, 20.0086,
            30.2406, 57.9969, 18.3264, 29.3075, 32.235, 60.5131, 15.9164,
            20.0653, 23.0931, 14.8494, 11.6784, 31.3284, 25.0627, 32.8897,
            44.3362, 25.7805, 21.8137,
          ],
        })
      );
    } catch (e) {
      reject(
        Service.rejectResponse(e.message || "Invalid input", e.status || 405)
      );
    }
  });
/**
 * symbol into
 * Gets a symbol info message
 *
 * query String trading pair symbol (optional)
 * limit String limit results (optional)
 * type String type (optional)
 * exchange String exchange (optional)
 * returns List
 * */
const geSearchSymbol = ({ query, limit, type, exchange }) =>
  new Promise(async (resolve, reject) => {
    try {
      resolve(
        Service.successResponse({
          query,
          limit,
          type,
          exchange,
        })
      );
    } catch (e) {
      reject(
        Service.rejectResponse(e.message || "Invalid input", e.status || 405)
      );
    }
  });
/**
 * symbol into
 * Gets a symbol info message
 *
 * symbol String trading pair symbol (optional)
 * returns Symbol
 * */
const geSymbol = ({ symbol }) =>
  new Promise(async (resolve, reject) => {
    const data = require("../adapters/files/searchSymbol.json");
    try {
      resolve(
        Service.successResponse(
          data.filter((element) => element.symbol.includes(symbol))
        )
      );
    } catch (e) {
      reject(
        Service.rejectResponse(e.message || "Invalid input", e.status || 405)
      );
    }
  });
/**
 * symbol into
 * Gets a symbols info message
 *
 * returns SymbolInfo
 * */
const geSymbolInfo = () =>
  new Promise(async (resolve, reject) => {
    try {
      resolve(
        Service.successResponse(require("../adapters/files/searchSymbol.json"))
      );
    } catch (e) {
      reject(
        Service.rejectResponse(e.message || "Invalid input", e.status || 405)
      );
    }
  });
/**
 * src
 * Gets a config message
 *
 * returns Config
 * */
const getConfig = () =>
  new Promise(async (resolve, reject) => {
    try {
      resolve(
        Service.successResponse({
          exchanges: [
            {
              value: "BINANCE",
              name: "Binance",
              desc: "Binance Exchange",
            },
          ],
          symbols_types: [
            {
              value: "crypto",
              name: "Cryptocurrency",
            },
          ],
          supported_resolutions: [
            "1",
            "3",
            "5",
            "15",
            "30",
            "60",
            "120",
            "240",
            "360",
            "480",
            "720",
            "1D",
            "3D",
            "1W",
            "1M",
          ],
          supports_search: true,
          supports_group_request: false,
          supports_marks: false,
          supports_timescale_marks: false,
          supports_time: true,
        })
      );
    } catch (e) {
      reject(
        Service.rejectResponse(e.message || "Invalid input", e.status || 405)
      );
    }
  });
/**
 * status
 * Gets a status message
 *
 * returns String
 * */
const getStatus = () =>
  new Promise(async (resolve, reject) => {
    try {
      resolve(Service.successResponse("Hello"));
    } catch (e) {
      reject(
        Service.rejectResponse(e.message || "Invalid input", e.status || 405)
      );
    }
  });
/**
 * time
 * Gets server time
 *
 * returns BigDecimal
 * */
const getTime = () =>
  new Promise(async (resolve, reject) => {
    try {
      resolve(Service.successResponse({}));
    } catch (e) {
      reject(
        Service.rejectResponse(e.message || "Invalid input", e.status || 405)
      );
    }
  });

module.exports = {
  geHistoryElement,
  geSearchSymbol,
  geSymbol,
  geSymbolInfo,
  getConfig,
  getStatus,
  getTime,
};
